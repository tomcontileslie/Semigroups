#############################################################################
##
#W  tietze.xml
#Y  Copyright (C) 2021                                   Tom Conti-Leslie
##                                                       Ben Spiers
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

## TODO DELETE - JUST HERE AS EXAMPLE
<#GAPDoc Label="TrivialSemigroup">
  <ManSection>
    <Func Name="TrivialSemigroup" Arg="[filt, ][deg]"/>
    <Returns>
      A trivial semigroup.
    </Returns>
      <Description>
        A <B>trivial</B> semigroup is a semigroup with precisely one element.
        This function returns a trivial semigroup in the representation given
        by the filter <A>filter</A>, and (if possible) with the degree of the
        representation given by the non-negative integer <A>deg</A>.
        <P/>

        The optional argument <A>filt</A> may be one of the following:

        <List>
          <Item><C>IsTransformationSemigroup</C>
            (the default, if <A>filt</A> is not specified),</Item>
          <Item><C>IsPartialPermSemigroup</C>,</Item>
          <Item><C>IsBipartitionSemigroup</C>,</Item>
          <Item><C>IsBlockBijectionSemigroup</C>,</Item>
          <Item><C>IsPBRSemigroup</C>,</Item>
          <Item><C>IsBooleanMatSemigroup</C>.</Item>
        </List>

        If the optional argument <A>deg</A> is not specified, then the smallest
        possible degree will be used.
        <P/>
        <Example><![CDATA[
gap> S := TrivialSemigroup();
<trivial transformation group of degree 0 with 1 generator>
gap> Size(S);
1
gap> S := TrivialSemigroup(3);
<trivial transformation group of degree 3 with 1 generator>
gap> S := TrivialSemigroup(IsBipartitionSemigroup, 2);
<trivial block bijection group of degree 2 with 1 generator>
gap> Elements(S);
[ <block bijection: [ 1, 2, -1, -2 ]> ]]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="StzPresentation">
  <ManSection>
    <Oper Name="StzPresentation" Arg="s"/>
    <Returns>
      A Semigroup Tietze (Stz) object.
    </Returns>
    <Description>
      If <A>s</A> is a fp semigroup
      (<Ref Filt="IsFpSemigroup" BookName="ref"/>),
      then this function returns a modifiable object representing the generators
      and relations of <A>s</A>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsStzPresentation">
  <ManSection>
    <Filt Name="IsStzPresentation" Arg="stz"/>
    <Returns>
      <K>true</K> or <K>false</K>.
    </Returns>
    <Description>
      Every semigroup Tietze object is an element of the category
      <C>IsStzPresentation</C>. Internally, each Stz object contains a list
      of generators (each represented as a string) and a list of relations
      (each represented as a pair of LetterRep words, see
      <Ref Oper="LetterRepAssocWord" BookName="ref"/>).
      These generator and relation lists can be modified using Tietze
      transformations
      (LINK TO LATER SECTION HERE).

      <P/>

      When a <C>IsStzPresentation</C> object <A>stz</A> is created from an fp
      semigroup <C>s</C> using <C>stz := StzPresentation(s)</C>, the generators
      and relations of <A>stz</A> are initially equal to the generators and
      relations of <C>s</C>. However, as the Stz object <A>stz</A> is modified,
      these lists may change, and their current state can be viewed using
      <Ref Oper="GeneratorsOfStzPresentation"/> and
      <Ref Oper="RelationsOfStzPresentation"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SimplifiedFpSemigroup">
  <ManSection>
    <Filt Name="SimplifiedFpSemigroup" Arg="S"/>
    <Returns>
      <A>T</A>, an FpSemigroup object.
    </Returns>
    <Description>
      If <A>S</A> is an FpSemigroup object, then <C>SimplifiedFpSemigroup</C> 
      will return an FpSemigroup object <A>T</A> which is isomorphic to <A>S</A>
      which has been reduced to minimise its length.

      <C>SimplifiedFpSemigroup</C> applies
      <Ref Oper="SimplifyFpSemigroup"/>
      and assigns the <C>Range</C> of the isomorphism object which is returned
      to <A>T</A>, adding the isomorphism to <A>T</A> as an attribute. In this
      way, while <A>T</A> is a completely new FpSemigroup object, words in
      <A>S</A> can be mapped to <A>T</A> using the map obtained from the
      attribute <C>FpTietzeIsomorphism(T)</C>.

      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");;
gap> S := F/[[F.1^4, F.1], [F.1, F.1^44], [F.1^8, F.2*F.3]];;
gap> T := SimplifiedFpSemigroup(S);;
gap> map := FpTietzeIsomorphism(T);;
gap> S.1^map;
b*c
gap> S.1^map = T.1 * T.2;
true
gap> invmap := InverseGeneralMapping(map);;
gap> T.1^invmap = S.2;
true
gap> T.1 = S.2;
false]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SimplifyFpSemigroup">
  <ManSection>
    <Filt Name="SimplifyFpSemigroup" Arg="S"/>
    <Returns>
      A mapping object.
    </Returns>
    <Description>
      If <A>S</A> is an FpSemigroup object, then <C>SimplifyFpSemigroup</C> 
      will return a mapping object which will map <A>S</A> to an FpSemigroup
      which has had its presentation simplified.

      <C>SimplifyFpSemigroup</C> creates an <C>StzPresentation</C> object
      <A>stz</A> from <A>S</A>, which is then reduced using Tietze
      transformations until the presentation cannot be reduced in length any
      further.<P/>

      <C>SimplifyFpSemigroup</C> applies the function
      <Ref Oper="StzSimplifyPresentation"/>
      to <A>stz</A>, which repeatedly checks
      whether a number of different possible transformations will cause a
      reduction in length, and if so applies the best one. This loop continues
      until no transformations cause any possible reductions, in which case
      the mapping is returned. The newly reduced FpSemigroup can be accessed
      either by taking the range of the mapping or calling
      <C>SimplifiedFpSemigroup</C>, which first runs <C>SimplifyFpSemigroup</C>
      and then returns the range of the mapping with the mapping held as an 
      attribute.

      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> map := SimplifyFpSemigroup(T);
#I  <fp semigroup presentation with 3 generators and 2 relations with length 19>
#I  <Removing redundant generator a using relation :1. a = b^5*c>
#I  <fp semigroup presentation with 2 generators and 1 relation with length 11>
#I  <Creating new generator to replace instances of word: b^3>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
MappingByFunction( <fp semigroup on the generators [ a, b, c ]>, <fp semigroup\n
 on the generators [ b, c, a ]>, function( word ) ... end, function( word )\n
... end )
gap> T.1;
a
gap> T.1^map;
b^5*c
gap> RelationsOfFpSemigroup(Range(map))
[ [ b^3, a ], [ a^2, a ] ]]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="StzSimplifyOnce">
  <ManSection>
    <Filt Name="StzSimplifyOnce" Arg="stz"/>
    <Returns>
      <K>true</K> or <K>false</K>
    </Returns>
    <Description>
      If <A>stz</A> is an StzPresentation object, then
      <C>StzSimplifyOnce</C> will check the possible reductions in length for a
      number of different possible Tietze transformations, and apply the choice 
      which gives the least length. If a valid transformation was found then the 
      function returns <K>true</K>, and if no transformation was performed
      because none would not lead to a reduction in length, then the function
      returns <K>false</K>.<P/>

      There are four different possible transformations that
      <C>StzSimplifyOnce</C> may apply. The function searches for redundant 
      generators and checks if removing them would give a lesser length, it 
      checks whether substituting one side of each relation throughout the rest 
      of the relations would give a lesser length, it checks whether there are 
      any trivial relations (of the form <A>w = w</A> for some word <A>w</A>)
      or any duplicated relations (relations which are formed from precisely the
      same words as another relation), and it checks whether any frequently
      occurring subwords in the relations can be replaced with a new generator 
      to produce a lesser length.<P/>

      At InfoLevel 1 the precise transformations performed are printed to the 
      screen.

      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> stz := StzPresentation(T);
<fp semigroup presentation with 3 generators and 2 relations with length 19>
gap> StzSimplifyOnce(stz);
#I  <Removing redundant generator a using relation :1. a = b^5*c>
true
gap> stz;
<fp semigroup presentation with 2 generators and 1 relation with length 11>]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="StzSimplifyPresentation">
  <ManSection>
    <Filt Name="StzSimplifyPresentation" Arg="stz"/>
    <Description>
      If <A>stz</A> is an StzPresentation object, then
      <C>StzSimplifyOnce</C> will repeatedly apply the best of a few possible 
      reductions to <A>stz</A> until the reductions no longer lessen the legnth 
      of the presentation.<P/>

      <C>StzSimplifyPresentation</C> will repeatedly apply the function
      <C>StzSimplifyOnce</C> to the presentation until
      <C>StzSimplifyOnce</C> fails to find a transformation which can reduce the
      length of <A>stz</A>.

      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> stz := StzPresentation(T);
<fp semigroup presentation with 3 generators and 2 relations with length 19>
gap> StzSimplifyPresentation(stz);
#I  <fp semigroup presentation with 3 generators and 2 relations with length 19>
#I  <Removing redundant generator a using relation :1. a = b^5*c>
#I  <fp semigroup presentation with 2 generators and 1 relation with length 11>
#I  <Creating new generator to replace instances of word: b^3>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="UnreducedFpSemigroupOfFpSemigroup">
  <ManSection>
    <Filt Name="UnreducedFpSemigroupOfFpSemigroup" Arg="S"/>
    <Returns>
      <A>T</A>, an fp semigroup object.
    </Returns>
    <Description>
      If <A>S</A> is an fp semigroup object that has been obtained through
      calling
      <Ref Oper="SimplifiedFpSemigroup"/>
      on some fp semigroup <A>T</A>
      then <C>UnreducedFpSemigroupOfFpSemigroup</C> returns the original
      semigroup object before simplification. These are unrelated semigroup 
      objects, except for that <A>S</A> will have a
      <Ref Oper="FpTietzeIsomorphism"/>
      attribute that returns an isomorphic mapping from <A>T</A> to <A>S</A>.
      <P/>

      If (Ref Oper="SimplifyFpSemigroup"/>
      has been called on an fp semigroup <A>T</A>,
      then <C>UnreducedFpSemigroupOfFpSemigroup</C> can be used on the
      <C>Range</C> of the resultant mapping to obtain the domain.
      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> S := SimplifiedFpSemigroup(T);
#I  <fp semigroup presentation with 3 generators and 2 relations with length 19>
#I  <Removing redundant generator a using relation :1. a = b^5*c>
#I  <fp semigroup presentation with 2 generators and 1 relation with length 11>
#I  <Creating new generator to replace instances of word: b^3>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
<fp semigroup on the generators [ b, c, d ]>
gap> UnreducedFpSemigroupOfFpSemigroup(S) = T;
true]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="FpTietzeIsomorphism">
  <ManSection>
    <Filt Name="FpTietzeIsomorphism" Arg="S"/>
    <Returns>
      A mapping object.
    </Returns>
    <Description>
      If <A>S</A> is an fp semigroup object that has been obtained through
      calling <Ref Oper="SimplifiedFpSemigroup"/>
      on some fp semigroup <A>T</A>
      then <C>FpTietzeIsomorphism</C> returns an isomorphic mapping from
      <A>T</A> to <A>S</A>. Simplification produces an fp semigroup isomorphic 
      to the original fp semigroup, and these two fp semigroup objects can 
      interact with each other through the mapping given by this function.
      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> S := SimplifiedFpSemigroup(T);
#I  <fp semigroup presentation with 3 generators and 2 relations with length 19>
#I  <Removing redundant generator a using relation :1. a = b^5*c>
#I  <fp semigroup presentation with 2 generators and 1 relation with length 11>
#I  <Creating new generator to replace instances of word: b^3>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
#I  <fp semigroup presentation with 3 generators and 2 relations with length 10>
<fp semigroup on the generators [ b, c, d ]>
gap> T.2;
b
gap> S.1;
b
gap> T.2 = S.1;
false
gap> T.2^map = S.1;]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="GeneratorsOfStzPresentation">
  <ManSection>
    <Filt Name="GeneratorsOfStzPresentation" Arg="stz"/>
    <Returns>
      A list of strings.
    </Returns>
    <Description>
      If <A>stz</A> is an StzPresentation object then
      <C>GeneratorsOfStzPresentation</C> will return as strings the generators
      of the fp semigroup that the presentation was created from. In the 
      StzPresentation object it is only necessary to know how many generators
      there are, but for the purposes of representing generators and relations 
      of the presentation object and building a new fp semigroup from the object
      the strings that the generators should appear as are stored.

      <P/>

      As Tietze transformations are performed on <A>stz</A>, the generators
      will change, but the labels will remain as close to the original labels 
      as possible, so that if a generator in the fp semigroup obtained from 
      the presentation is the same as a generator in the original fp semigroup,
      then they should have the same label.
      

      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> stz := StzPresentation(T);
<fp semigroup presentation with 3 generators and 2 relations with length 19>
gap> GeneratorsOfStzPresentation(stz);
[ "a", "b", "c" ]]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RelationsOfStzPresentation">
  <ManSection>
    <Filt Name="RelationsOfStzPresentation" Arg="stz"/>
    <Returns>
      A list of pairs of words in letter rep form.
    </Returns>
    <Description>
      If <A>stz</A> is an StzPresentation object then
      <C>RelationsOfStzPresentation</C> will return in letter rep form the 
      current relations of the presentation object. When the presentation object
      is first created, these will be the letter rep forms of the relations of 
      the fp semigroup object that is used to create <A>stz</A>. As Tietze 
      transformations are performed on the presentation object, the relations 
      returned by this function will change to reflect the transformations.
      

      <Example><![CDATA[
gap> F := FreeSemigroup("a", "b", "c");
<free semigroup on the generators [ a, b, c ]>
gap> T := F / [[F.1, F.2^5 * F.3], [F.2^6, F.2^3]];
<fp semigroup on the generators [ a, b, c ]>
gap> stz := StzPresentation(T);
<fp semigroup presentation with 3 generators and 2 relations with length 19>
gap> RelationsOfStzPresentation(stz);
[ [ [ 1 ], [ 2, 2, 2, 2, 2, 3 ] ], [ [ 2, 2, 2, 2, 2, 2 ], [ 2, 2, 2 ] ] ]]]>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>